---
description: 
globs: 
alwaysApply: false
---
# Git Workflow

## Branch Strategy
1. `main`: メインブランチ（本番環境用）
2. 機能開発は`feature/`プレフィックスのブランチで行う
   - 例：`feature/add-todo-api`
   - 例：`feature/implement-auth`

## Commit Rules
1. コミットメッセージの形式：
   ```
   <type>: <subject>
   
   <body>
   ```
   - type: feat, fix, docs, style, refactor, test, chore
   - subject: 変更内容の簡潔な説明
   - body: 詳細な説明（必要な場合）

2. コミットの粒度：
   - 1つの機能や修正ごとにコミット
   - 関連する変更は1つのコミットにまとめる

## Development Flow
1. 機能開発の手順：
   - 機能ブランチを作成（`git checkout -b feature/xxx`）
   - 開発・テスト
   - 問題なければ`main`にマージ
   - 必要に応じて本番環境にデプロイ

2. コードレビュー：
   - 自身でコードを確認
   - テストの実行
   - 動作確認

## Branch Cleanup
1. ローカルブランチの管理：
   - マージ完了後、ローカルブランチを削除
   ```bash
   git branch -d feature/xxx
   ```
   - リモートブランチは残す（履歴として）
   - 必要に応じて後から参照可能

2. 削除前の確認：
   - マージが正しく完了しているか
   - 必要な変更がすべて含まれているか
   - リモートに正しくプッシュされているか

3. ブランチの整理：
   - 定期的にローカルの古いブランチを確認
   - 不要なローカルブランチを削除
   - リモートの履歴は保持

## Pull Request Rules
1. PRのタイトルは変更内容を明確に
2. 変更内容の詳細な説明を記載
3. レビューが必要な場合は明示的に指定

## Code Review
1. コードの品質チェック
2. セキュリティの確認
3. パフォーマンスの確認
4. テストの確認
